#!/usr/bin/env sh

VERSION="0.1.0"

#
# Allows binary-specific path overrides
#
CMD_ENOENT="command @@ not found"
: "${AWS="$(which aws)"}"           && : "${AWS:?${CMD_ENOENT//@@/aws}}"
: "${BASENAME="$(which basename)"}" && : "${BASENAME:?${CMD_ENOENT//@@/basename}}"
: "${CAT="$(which cat)"}"           && : "${CAT:?${CMD_ENOENT//@@/cat}}"
: "${ECHO="$(which echo)"}"         && : "${ECHO:?${CMD_ENOENT//@@/echo}}"
: "${MKDIR="$(which mkdir)"}"       && : "${MKDIR:?${CMD_ENOENT//@@/mkdir}}"
: "${TOUCH="$(which touch)"}"       && : "${TOUCH:?${CMD_ENOENT//@@/touch}}"
: "${TPUT="$(which tput)"}"         && : "${TPUT:?${CMD_ENOENT//@@/tput}}"

: "${AWS_GOOGLE_AUTH="$(which aws-google-auth)"}"
: "${JAVA="$(which java)"}"
: "${PYTHON3="$(which python3 || (python -V | grep -Eqe '3\.[7-9]\.[0-9]+' && which python))"}"

: "${SCRIPT:="$(${BASENAME} $0)"}"
: "${PROFILE_FILE:="${HOME}/.config/ssm-ssh/config.properties"}"

RED="$(${TPUT} setaf 1)"
GREEN="$(${TPUT} setaf 2)"
YELLOW="$(${TPUT} setaf 3)"
NC="$(${TPUT} sgr0)"

INFO="${GREEN}INFO:${NC}"
WARN="${YELLOW}WARN:${NC}"
FATAL="${RED}FATAL:${NC}"

print() {
    ${ECHO} $* >&2
}

info() {
    ${ECHO} ${INFO} $* >&2
}

warn() {
    ${ECHO} ${WARN} $* >&2
}

fatal() {
    ${ECHO} ${FATAL} $* >&2
    exit 1
}

v_info() {
    ${ECHO} ${INFO} $* >&3
}

v_warn() {
    ${ECHO} ${WARN} $* >&3
}

v_fatal() {
    ${ECHO} ${FATAL} $* >&3
    exit 1
}

usage() {
    ${CAT} <<EOF >&${2:-2}
Usage:  ${SCRIPT} [OPTIONS] ip-address
  or:   ${SCRIPT} [OPTIONS] ec2-instance-id
  or:   ${SCRIPT} [OPTIONS] [-C | --cluster] cluster-name ecs-container-instance

Options:
    -h, --help
        Prints this help message and exits
    -S PROFILE, --set-default-profile PROFILE
        Sets the default profile for ${SCRIPT} to PROFILE
    -O PROFILE, --use-okta PROFILE
        Use Okta for SSO (SAML) authentication with PROFILE
    -G PROFILE, --use-google PROFILE
        Use Google for SSO (SAML) authentication with PROFILE
    -C CLUSTER, --cluster CLUSTER
        Required when the instance address is an ECS container instance
    -v, --verbose
        Enables verbose logging to standard error
    -V, --version
        Prints the version number then exits

Examples:

    $ ${SCRIPT} 10.1.2.3
        Open a shell on the EC2 instance with private IPv4
        address 10.1.2.3.

    $ ${SCRIPT} i-1234567890abcdef0
        Open a shell on EC2 instance i-1234567890abcdef0

    $ ${SCRIPT} abcd7890-b12a-4321-abcd-a1b23c456789
        Open a shell via an ECS container instance ID

    $ ${SCRIPT} -O prod 10.1.2.3
        Authenticate with Okta SAML (okta-aws) and then use the
        assumed role to open a shell on the EC2 instance with
        private IP address 10.1.2.3.

Report bugs via https://github.com/jwfh/ssm-ssh/issues.
EOF
    exit $1
}

version() {
    ${CAT} <<EOF >&${1:-2}
${SCRIPT} ${VERSION}

Written by Jacob House
EOF
    exit 0
}

get_aws_default_profile() {
    if [ $# -ne 1 ]; then
        fatal "get_aws_default_profile takes 1 argument"
    fi
    if [ -f "${PROFILE_FILE}" ] && grep -q -E -e '^aws_profile=.+' "${PROFILE_FILE}"; then
        awk -F= '/^aws_profile/ { print $2 }' | tail -n1
    else
        log "No default AWS profile is set for $0"
        read -p "Enter a profile: " PROFILE >&2
        set_aws_profile ${PROFILE}
    fi
}

set_aws_profile() {
    if [ $# -ne 1 ]; then
        fatal "set_aws_profile takes 1 argument"
    fi
    if [ ! -f "${PROFILE_FILE}" ]; then
        mkdir -p "$(dirname "${PROFILE_FILE}")"
        touch "${PROFILE}"
    fi
    if grep -q -E -e '^aws_profile=.+' "${PROFILE_FILE}"; then
        ex -s "${PROFILE_FILE}" <<EDIT
/^aws_profile=..*/ s/^\(aws_profile=\).*\$/\1$1/
w
q
EDIT
    else
        echo "aws_profile=$1" | tee "${PROFILE}" >/dev/null
    fi
    info "AWS profile set to '$(get_aws_default_profile)'"
}

is_private_ip() {
    if [ $# -ne 1 ]; then
        fatal "is_private_ip takes 1 argument"
    fi
    echo $1 | grep -q -E -e '^(192\.168|10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.)'
}

ip_to_instance_id() {
    if [ $# -ne 1 ]; then
        fatal "ip_to_instance_id takes 1 argument"
    fi
    {
        if is_private_ip "$1"; then
            ${AWS_CMD} ec2 describe-instances --filter "Name=private-ip-address,Values='$1'"
        else
            ${AWS_CMD} ec2 describe-instances --filter "Name=ip-address,Values='$1'"
        fi
    } | jq .Reservations.Instances[0].InstanceId
}

ecs_container_instance_to_instance_id() {
    if [ $# -ne 2 ]; then
        fatal "ecs_container_instance_to_instance_id takes 1 argument"
    fi
    {
        ${AWS_CMD} ecs decribe-container-instances --cluster $1 --container-instances $2
    } | jq .containerInstances[0].ec2InstanceId
}

set_aws_cmd() {
    if [ -z "${PROFILE}" ]; then
        PROFILE=$(get_aws_default_profile)
    fi

    if [ "${PROFILE_TYPE}" == "OKTA" ]; then
        if [ ! -f "${HOME}/.okta/okta-aws-cli.jar" ]; then
            fatal "Could not locate ~/.okta/okta-aws-cli.jar. Please make sure the Okta AWS CLI is installed."
        fi
        if ! java -version &>/dev/null; then
            fatal "Java is not installed. Try installing Java 8."
        else
            JAVA_CMD="$(which java)"
        fi
        AWS_CMD="env OKTA_PROFILE=${PROFILE} ${JAVA_CMD} -classpath ${HOME}/.okta/okta-aws-cli.jar com.okta.tools.WithOkta ${AWS} --profile ${PROFILE}"
    elif [ "${PROFILE_TYPE}" == "GOOGLE" ]; then
        if ! aws-google-auth --version; then
            true
        else
            GOOGLE_AUTH="$(which aws-google-auth)"
        fi
    else
        AWS_CMD="${AWS}"
    fi
}

run_aws_cmd() {
    if [ -z "${AWS_CMD}" ]; then
        set_aws_cmd
    fi
    v_info Executing \'${AWS_CMD} $*\'
    echo ${AWS_CMD} $* | sh
}

: "${1?"${SCRIPT} requires at least 1 argument; see ${SCRIPT}(1)"}"

exec 3>/dev/null

PROFILE_TYPE=
PROFILE=

while [ "x$1" != "x" ]; do
    option=$1
    shift
    args="${args} \"${option}\""
    
    case ${option} in 
        --*=*)
            optarg=`echo ${option} | sed -e 's,^[^=]*=,,'`
            ;;
        -?*)
            optarg=`echo ${option} | sed -e 's,^[^=]*=,,'`
            ;;
    esac

    case ${option} in 
        --help | -h)
            usage 0 1
            ;;
        --version | -V)
            version 1
            ;;
        --verbose | -v)
            exec 3>&2
            ;;
        --set-default-profile=*)
            set_aws_profile "${optarg}"
            exit 0
            ;;
        --set-default-profile | -S)
            set_aws_profile "$1"
            shift
            args="${args} \"${option}\""
            exit 0
            ;;
        --use-okta=*)
            PROFILE_TYPE="OKTA"
            PROFILE="${optarg}"
            ;;
        --use-okta | -O)
            PROFILE_TYPE="OKTA"
            PROFILE="$1"
            shift
            args="${args} \"${option}\""
            ;;
        --use-google=*)
            PROFILE_TYPE="GOOGLE"
            PROFILE="${optarg}"
            ;;
        --use-google | -G)
            PROFILE_TYPE="GOOGLE"
            PROFILE="$1"
            shift
            args="${args} \"${option}\""
            ;;
        --)
            break
            ;;
    esac
    v_info Parsed option ${option}
done


run_aws_cmd sts get-caller-identity
