#!/usr/bin/env sh

SCRIPT="$(basename $0)"

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'
INFO="${GREEN}INFO:${NC}"
WARN="${YELLOW}WARN:${NC}"
FATAL="${RED}FATAL:${NC}"

PROFILE_FILE="$HOME/.config/ssm-ssh/config.properties"

print() {
    echo $* >&2
}

info() {
    echo ${INFO} $* >&2
}

warn() {
    echo ${WARN} $* >&2
}

fatal() {
    echo ${FATAL} $* >&2
}

v_info() {
    echo ${INFO} $* >&3
}

v_warn() {
    echo ${WARN} $* >&3
}

v_fatal() {
    echo ${FATAL} $* >&3
}

usage() {
    log "Print usage here"
    log "Then exit with $1"
    exit $1
}

get_aws_default_profile() {
    if [ $# -ne 1 ]; then
        fatal "get_aws_default_profile takes 1 argument"
        exit 1
    fi
    if [ -f "${PROFILE_FILE}" ] && grep -q -E -e '^aws_profile=.+'; then
        awk -F= '/^aws_profile/ { print $2 }' | tail -n1
    else
        log "No default AWS profile is set for $0"
        read -p "Enter a profile: " PROFILE >&2
        set_aws_profile ${PROFILE}
        echo ${PROFILE}
    fi
}

set_aws_profile() {
    if [ $# -ne 1 ]; then
        fatal "set_aws_profile takes 1 argument"
        exit 1
    fi
    if [ -f "${PROFILE_FILE}" ]; then :; else
        mkdir -p "$(dirname "${PROFILE_FILE}")"
        echo "aws_profile=$1" | tee "${PROFILE}" >/dev/null
        info "AWS profile set to '$(get_aws_default_profile)'"
    fi
}

is_private_ip() {
    if [ $# -ne 1 ]; then
        fatal "is_private_ip takes 1 argument"
        exit 1
    fi
    echo $1 | grep -q -E -e '^(192\.168|10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.)'
}

ip_to_instance_id() {
    if [ $# -ne 1 ]; then
        fatal "ip_to_instance_id takes 1 argument"
        exit 1
    fi
    {
        if is_private_ip "$1"; then
            ${AWS_CMD} ec2 describe-instances --filter "Name=private-ip-address,Values='$1'"
        else
            ${AWS_CMD} ec2 describe-instances --filter "Name=ip-address,Values='$1'"
        fi
    } | jq .Reservations.Instances[0].InstanceId
}

set_aws_cmd() {
    AWS_CMD="$(which aws)"
    if [ -z "${AWS_CMD}" ]; then
        fatal "The AWS CLI is not installed. Try running \`brew install awscli\`."
        exit 1
    fi

    if [ -z "${PROFILE}" ]; then
        PROFILE=$(get_aws_default_profile)
    fi

    if [ "${PROFILE_TYPE}" == "OKTA" ]; then
        if [ ! -f "${HOME}/.okta/okta-aws-cli.jar" ]; then
            fatal "Could not locate ~/.okta/okta-aws-cli.jar."
            fatal "Please make sure the Okta AWS CLI is installed."
            exit 1
        fi
        JAVA_CMD="$(which java)"
        if [ -z "${JAVA_CMD}" ]; then
            fatal "Java is not installed. Try installing Java 8."
            exit 1
        fi
        AWS_CMD="env OKTA_PROFILE=${PROFILE} ${JAVA_CMD} -classpath ${HOME}/.okta/okta-aws-cli.jar com.okta.tools.WithOkta aws --profile ${PROFILE}"
    elif [ "${PROFILE_TYPE}" == "GOOGLE" ]; then
        true
    fi
}

run_aws_cmd() {
    if [ -z "${AWS_CMD}" ]; then
        set_aws_cmd
    fi
    v_info Executing ${AWS_CMD} $*
    echo ${AWS_CMD} $* | sh
}

exec 3>/dev/null

PROFILE_TYPE=
PROFILE=

while [ "x$1" != "x" ]; do
    option=$1
    shift
    args="${args} \"${option}\""
    
    case ${option} in 
        *=*)
            optarg=`echo ${option} | sed -e 's,^[^=]*=,,'`
            ;;
    esac

    case ${option} in 
        --help | -h)
            usage 0
            ;;
        --verbose | -v)
            exec 3>&2
            ;;
        --set-default-profile=*)
            set_aws_profile "${optarg}"
            exit 0
            ;;
        --set-default-profile | -S)
            set_aws_profile "$1"
            shift
            args="${args} \"${option}\""
            exit 0
            ;;
        --use-okta=*)
            PROFILE_TYPE="OKTA"
            PROFILE="${optarg}"
            ;;
        --use-okta | -O)
            PROFILE_TYPE="OKTA"
            PROFILE="$1"
            shift
            args="${args} \"${option}\""
            ;;
        --use-google=*)
            PROFILE_TYPE="GOOGLE"
            PROFILE="${optarg}"
            ;;
        --use-google | -G)
            PROFILE_TYPE="GOOGLE"
            PROFILE="$1"
            shift
            args="${args} \"${option}\""
            ;;
        --)
            break
            ;;
    esac
    v_info Parsed option ${option}
done


run_aws_cmd sts get-caller-identity
